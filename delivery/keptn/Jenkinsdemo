@Library('keptn-library@3.5')_
def keptn = new sh.keptn.Keptn()

node {
    properties([
        parameters([
         string(defaultValue: 'simpleproject', description: 'Name of your Keptn Project you have setup for progressive delivery', name: 'Project', trim: false), 
         string(defaultValue: 'staging', description: 'First stage you want to deploy into', name: 'Stage', trim: false), 
         string(defaultValue: 'simplenode', description: 'Name of the service you provide a configuration change for', name: 'Service', trim: false),
         string(defaultValue: 'docker.io/grabnerandi/simplenodeservice:2.0.0', description: 'Name of the service you provide a configuration change for', name: 'Image', trim: false),
         string(defaultValue: '60', description: 'How many minutes to wait until Keptn is done? 0 to not wait', name: 'WaitForResult'),
        ])
    ])
    
    stage('Initialize Keptn') {
    
        keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/podtato-head1/main/delivery/keptn/shipyard.yaml", 'keptn/shipyard.yaml')
        //keptn.downloadFile("https://github.com/SharathG1/podtato-head1/blob/main/delivery/keptn/prometheus/sli.yaml", 'keptn/dynatrace/dynatrace.conf.yaml')
        keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/podtato-head1/main/delivery/keptn/prometheus/sli.yaml", 'keptn/sli.yaml')
        keptn.downloadFile("https://raw.githubusercontent.com/SharathG1/podtato-head1/main/delivery/keptn/slo.yaml", 'keptn/slo.yaml')
        archiveArtifacts artifacts:'keptn/**/*.*'

        // Initialize the Keptn Project - ensures the Keptn Project is created with the passed shipyard
        keptn.keptnInit project:"${params.Project}", service:"${params.Service}", stage:"${params.Stage}", shipyard:'keptn/shipyard.yaml'
        keptn.keptnConfigureMonitoring monitoring:"prometheus"
        // Upload all the files
        //keptn.keptnAddResources('keptn/dynatrace/dynatrace.conf.yaml',)
        keptn.keptnAddResources('keptn/sli.yaml','prometheus/sli.yaml')
        keptn.keptnAddResources('keptn/slo.yaml','slo.yaml')
    }    
    
    stage('Evaluate Build with Keptn') {
                    
                    //Define the Keptn Json payload for the evaluation request post
                    def keptn_json = """
                    {
                     "type": "sh.keptn.event.start-evaluation",
                     "source": "Jenkins",
                     "data": {
                        
                       "start": "${params.StartTime}",
                        "end": "${params.EndTime}",
                        "project": "${params.Project}",
                        "stage": "${params.Stage}",
                        "service": "${params.Service}",
                        "teststrategy": "manual"
                      }
                      }
                     """
                    // "labels": {"environment": "yourenv","yourney": "youryourney"}

                    //Post the start-evaluation event to Keptn API
                    def kept_context_request = httpRequest contentType: 'APPLICATION_JSON', customHeaders: [[maskValue: true, name: 'x-token', value: "${env.KEPTN_API_TOKEN}"]], httpMode: 'POST', requestBody: keptn_json, responseHandle: 'STRING', url: "${env.KEPTN_BRIDGE}/v1/event", validResponseCodes: "100:404"
    }

    stage('Trigger Delivery') {
        echo "Progressive Delivery: Triggering Keptn to deliver ${params.Image}"

        // send deployment finished to trigger tests
        def keptnContext = keptn.sendConfigurationChangedEvent project:"${params.Project}", service:"${params.Service}", stage:"${params.Stage}", image:"${params.Image}" 
        String keptn_bridge = env.KEPTN_BRIDGE
        echo "Open Keptns Bridge: ${keptn_bridge}/trace/${keptnContext}"
    }
    stage('Wait for Result') {
        waitTime = 0
        if(params.WaitForResult?.isInteger()) {
            waitTime = params.WaitForResult.toInteger()
        }

        if(waitTime > 0) {
            echo "Waiting until Keptn is done and returns the results"
            def result = keptn.waitForEvaluationDoneEvent setBuildResult:true, waitTime:waitTime
            echo "${result}"
        } else {
            echo "Not waiting for results. Please check the Keptns bridge for the details!"
        }
    }
}
